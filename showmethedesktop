#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;

use lib "$FindBin::Bin/contrib/protocol-rfb/lib";
use lib "$FindBin::Bin/contrib/reanimator/lib";

use JSON;
use ReAnimator;
use ReAnimator::Slave;
use Protocol::RFB::Client;

use Getopt::Long 'GetOptions';
use File::Basename;

my $HELP    = 0;
my $ADDRESS = 'localhost';
my $PORT    = 5900;
my $PASSWORD;
my $WIDTH;
my $HEIGHT;

GetOptions(
    "help|h"     => \$HELP,
    "address=s"  => \$ADDRESS,
    "port=s"     => \$PORT,
    "password=s" => \$PASSWORD,
    "width=i"    => \$WIDTH,
    "height=i"   => \$HEIGHT
);

my $basename = File::Basename::basename $0;
my $USAGE    = <<"EOF";
Usage: $basename --password <password>

Other options:

    --address   Default is '$ADDRESS'
    --port      Default is '$PORT'

    --width     Default is server's width
    --height    Default is server's height

EOF

die $USAGE if $HELP || !$PASSWORD;

my $server = ReAnimator->new;

$server->on_connect(
    sub {
        my ($self, $client) = @_;

        my $slave =
          ReAnimator::Slave->new(address => $ADDRESS, port => $PORT);

        my $vnc = Protocol::RFB::Client->new(password => '333333');

        $slave->on_message(
            sub {
                my $slave = shift;
                my $chunk = shift;

                $vnc->parse($chunk);
            }
        );

        $slave->on_disconnect(
            sub {
                $server->drop_connection($client);
            }
        );

        $vnc->on_handshake(
            sub {
                my $vnc = shift;

                warn 'Handshake is done';

                $client->send_message(
                    JSON->new->encode(
                        {   type   => 's',
                            name   => $vnc->server_name,
                            width  => $WIDTH || $vnc->width,
                            height => $HEIGHT || $vnc->height
                        }
                    )
                );
            }
        );

        $vnc->on_framebuffer_update(
            sub {
                my ($vnc, $message) = @_;

                warn 'Sending rectangles to the client ='
                  . @{$message->rectangles};

                $client->send_message(
                    JSON->new->encode(
                        {type => 'fu', rectangles => $message->rectangles}
                    )
                );
            }
        );

        $vnc->on_write(
            sub {
                my ($vnc, $chunk) = @_;

                $slave->send_message($chunk);
            }
        );

        $client->on_message(
            sub {
                my ($client, $message) = @_;

                warn "Message from client $message";

                my $json = JSON->new;

                $message = $json->decode($message);
                return unless $message;

                if ($message->{type} eq 'fuq') {
                    $vnc->framebuffer_update_request($message->{x},
                        $message->{y}, $message->{width}, $message->{height},
                        $message->{incremental});
                }
                elsif ($message->{type} eq 'pe') {
                    my $mask = 0;

                    if ($message->{event} eq 'mouseup') {
                        $mask = 0;
                    }
                    elsif ($message->{event} eq 'mousedown') {
                        $mask = 1;
                    }
                    elsif ($message->{event} eq 'mousemove') {
                        $mask = 0;
                    }
                    elsif ($message->{event} eq 'mousemove+mousedown') {
                        $mask = 1;
                    }
                    else {
                        warn 'Unknown pointer event';
                        return;
                    }

                    $vnc->pointer_event($message->{x}, $message->{y}, $mask);
                }
                elsif ($message->{type} eq 'ke') {
                    $vnc->key_event($message->{is_down}, $message->{key});
                }
            }
        );

        $self->add_slave($slave);
    }
);

$server->start;
